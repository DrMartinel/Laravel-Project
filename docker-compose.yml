version: '3.8'
services:
    app:  # This is the PHP-FPM container
        build:
            context: .
            target: development # Or production, for the production build
        volumes:
            - .:/var/www:delegated  # Mount the project directory (for development)
        depends_on:
            - db
        healthcheck:
            test: [ "CMD", "php-fpm", "-t" ] # Test if php-fpm config is valid
            interval: 10s
            timeout: 5s
            retries: 3
        environment:
            - APP_ENV=local  # Or production
            - DB_HOST=db
            - DB_DATABASE=${DB_DATABASE}
            - DB_USERNAME=${DB_USERNAME}
            - DB_PASSWORD=${DB_PASSWORD}
            - REVERB_HOST=reverb
            - REVERB_PORT=8080
            - REVERB_SCHEME=http
        env_file:
            - .env

    nginx: # This is the Nginx container
        image: nginx:stable-alpine  # Use the official Nginx image
        ports:
            - "80:80"   # Map port 80 on the host to port 80 in the container
        volumes:
            - .:/var/www:delegated # Mount the project directory (for serving static assets)
            - ./docker/nginx/default.conf:/etc/nginx/conf.d/default.conf:ro # Mount the Nginx config file (read-only)
        depends_on:
            - app     # Nginx depends on the PHP-FPM container

    db: #MySQL Database
        image: mysql:8.0
        ports:
            - "3306:3306"
        volumes:
            - db_data:/var/lib/mysql
        env_file:
            - .env.db

    reverb:
        build:
            context: .
            dockerfile: Dockerfile.reverb
        ports:
        - "${REVERB_PORT:-8080}:8080"
        env_file: # Use env_file OR environment, not both usually
        - .env   # Make sure this .env has correct DB_HOST=mysql, REDIS_HOST=redis etc. if Reverb needs them
        restart: unless-stopped
        command: php artisan reverb:start --host=0.0.0.0 --port=8080 --debug

    worker:
        build: # Use same build as app
            context: .
            target: development # Or production
        command: php artisan queue:work --queue=default --sleep=3 --tries=3 # Adjust queue, sleep, tries as needed
        restart: unless-stopped
        volumes:
            - .:/var/www:delegated # Needs access to code
        environment: # Needs DB access etc. Copy relevant vars or use env_file
            - APP_ENV=local
            - DB_HOST=db
            - QUEUE_CONNECTION=database # Tell worker to use database queue
            # Add other necessary vars like DB credentials if not using env_file below
        env_file:
            - .env # Can inherit from main .env, but ensure DB_HOST etc are correct for container
        depends_on:
            - db

volumes:
    db_data:
